{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BuyMeACoffe__CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BuyMeACoffe__NotEnoughETH",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "NewCoffe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "buyCoffe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCoffeById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            }
          ],
          "internalType": "struct BuyMeACoffe.Coffe",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCoffeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x798fd86ef4b4a2b1e4e0927c0fbf2bbcf257d345469b3bec9bac393718836b65",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "583512",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000040020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000040000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1e64c401d291ea63c4fc8e4f8bffd00130406cf1705769167107613c7f4708af",
    "transactionHash": "0x798fd86ef4b4a2b1e4e0927c0fbf2bbcf257d345469b3bec9bac393718836b65",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x798fd86ef4b4a2b1e4e0927c0fbf2bbcf257d345469b3bec9bac393718836b65",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1e64c401d291ea63c4fc8e4f8bffd00130406cf1705769167107613c7f4708af"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "583512",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "919654585bed29141959646c840b5988",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BuyMeACoffe__CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuyMeACoffe__NotEnoughETH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"NewCoffe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"buyCoffe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCoffeById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"internalType\":\"struct BuyMeACoffe.Coffe\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoffeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BuyMeACoffe.sol\":\"BuyMeACoffe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BuyMeACoffe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/// @title BuyMeACoffe\\r\\n/// @author Maikel Ordaz\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*** IMPORTS CONTRACTS ***/\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/*** IMPORTS INTERFACES ***/\\r\\n\\r\\n/*** IMPORTS LIBRARIES ***/\\r\\n\\r\\n/*** ERRORS ***/\\r\\nerror BuyMeACoffe__NotEnoughETH();\\r\\nerror BuyMeACoffe__CallFailed();\\r\\n\\r\\n/*** CONTRACT ***/\\r\\ncontract BuyMeACoffe is Ownable {\\r\\n    /*** LIBRARIES USED ***/\\r\\n    /*** STATE VARIABLES ***/\\r\\n    uint private s_coffeId;\\r\\n\\r\\n    struct Coffe {\\r\\n        address from;\\r\\n        uint256 timestamp;\\r\\n        string name;\\r\\n        string message;\\r\\n    }\\r\\n\\r\\n    /*** EVENTS ***/\\r\\n    event NewCoffe(address indexed from, uint256 timestamp, string name, string message);\\r\\n\\r\\n    /*** MAPPINGS ***/\\r\\n    mapping(uint256 => Coffe) private s_coffeById;\\r\\n\\r\\n    /*** MODIFIERS ***/\\r\\n    /*** CONSTRUCTOR ***/\\r\\n    constructor() {\\r\\n        s_coffeId = 0;\\r\\n    }\\r\\n\\r\\n    /*** RECEIVE / FALLBACK ***/\\r\\n    receive() external payable {\\r\\n        buyCoffe(\\\"Jhon\\\", \\\"Hi\\\");\\r\\n    }\\r\\n\\r\\n    /*** MAIN FUNCTIONS ***/\\r\\n    function buyCoffe(string memory name, string memory message) public payable {\\r\\n        if (msg.value == 0) {\\r\\n            revert BuyMeACoffe__NotEnoughETH();\\r\\n        }\\r\\n\\r\\n        s_coffeId++;\\r\\n\\r\\n        Coffe storage coffe = s_coffeById[s_coffeId];\\r\\n\\r\\n        coffe.from = msg.sender;\\r\\n        coffe.timestamp = block.timestamp;\\r\\n        coffe.name = name;\\r\\n        coffe.message = message;\\r\\n\\r\\n        emit NewCoffe(msg.sender, block.timestamp, name, message);\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        (bool success, ) = owner().call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert BuyMeACoffe__CallFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*** VIEW / PURE FUNCTIONS ***/\\r\\n    function getCoffeId() public view returns (uint256) {\\r\\n        return s_coffeId;\\r\\n    }\\r\\n\\r\\n    function getCoffeById(uint256 id) public view returns (Coffe memory) {\\r\\n        return s_coffeById[id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3d78e73a1610b74a6ad099a30e0e1c51efea6964b54733d7080c6a061bfb3ec2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610024565b6000600155610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610918806100836000396000f3fe6080604052600436106100745760003560e01c8063715018a61161004e578063715018a61461010b57806380291e23146101205780638da5cb5b1461014d578063f2fde38b1461017557600080fd5b80630863b162146100c05780630b96ef83146100e35780633ccfd60b146100f657600080fd5b366100bb576100b960405180604001604052806004815260200163253437b760e11b81525060405180604001604052806002815260200161486960f01b815250610195565b005b600080fd5b3480156100cc57600080fd5b506001546040519081526020015b60405180910390f35b6100b96100f13660046106f1565b610195565b34801561010257600080fd5b506100b9610268565b34801561011757600080fd5b506100b96102e7565b34801561012c57600080fd5b5061014061013b366004610755565b6102fb565b6040516100da91906107bb565b34801561015957600080fd5b506000546040516001600160a01b0390911681526020016100da565b34801561018157600080fd5b506100b9610190366004610819565b610490565b346101b35760405163ea317e9960e01b815260040160405180910390fd5b600180549060006101c383610849565b909155505060018054600090815260026020818152604090922080546001600160a01b031916331781554293810193909355845161020792918401918601906105b5565b50815161021d90600383019060208501906105b5565b50336001600160a01b03167f0b7f87ba586eecf73cd9a259d82989ed3432948ae690ef22ca831e8805769e3542858560405161025b93929190610872565b60405180910390a2505050565b61027061050b565b600080546040516001600160a01b039091169047908381818185875af1925050503d80600081146102bd576040519150601f19603f3d011682016040523d82523d6000602084013e6102c2565b606091505b50509050806102e45760405163203183b160e21b815260040160405180910390fd5b50565b6102ef61050b565b6102f96000610565565b565b61032f604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b600082815260026020818152604092839020835160808101855281546001600160a01b0316815260018201549281019290925291820180549193840191610375906108a7565b80601f01602080910402602001604051908101604052809291908181526020018280546103a1906108a7565b80156103ee5780601f106103c3576101008083540402835291602001916103ee565b820191906000526020600020905b8154815290600101906020018083116103d157829003601f168201915b50505050508152602001600382018054610407906108a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610433906108a7565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b5050505050815250509050919050565b61049861050b565b6001600160a01b0381166105025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102e481610565565b6000546001600160a01b031633146102f95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546105c1906108a7565b90600052602060002090601f0160209004810192826105e35760008555610629565b82601f106105fc57805160ff1916838001178555610629565b82800160010185558215610629579182015b8281111561062957825182559160200191906001019061060e565b50610635929150610639565b5090565b5b80821115610635576000815560010161063a565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261067557600080fd5b813567ffffffffffffffff808211156106905761069061064e565b604051601f8301601f19908116603f011681019082821181831017156106b8576106b861064e565b816040528381528660208588010111156106d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561070457600080fd5b823567ffffffffffffffff8082111561071c57600080fd5b61072886838701610664565b9350602085013591508082111561073e57600080fd5b5061074b85828601610664565b9150509250929050565b60006020828403121561076757600080fd5b5035919050565b6000815180845260005b8181101561079457602081850181015186830182015201610778565b818111156107a6576000602083870101525b50601f01601f19169290920160200192915050565b6020815260018060a01b0382511660208201526020820151604082015260006040830151608060608401526107f360a084018261076e565b90506060840151601f19848303016080850152610810828261076e565b95945050505050565b60006020828403121561082b57600080fd5b81356001600160a01b038116811461084257600080fd5b9392505050565b600060001982141561086b57634e487b7160e01b600052601160045260246000fd5b5060010190565b83815260606020820152600061088b606083018561076e565b828103604084015261089d818561076e565b9695505050505050565b600181811c908216806108bb57607f821691505b602082108114156108dc57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a0da9d86c26592d62114573dd115c6e05954fcae950a784437d85357a9fc479464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063715018a61161004e578063715018a61461010b57806380291e23146101205780638da5cb5b1461014d578063f2fde38b1461017557600080fd5b80630863b162146100c05780630b96ef83146100e35780633ccfd60b146100f657600080fd5b366100bb576100b960405180604001604052806004815260200163253437b760e11b81525060405180604001604052806002815260200161486960f01b815250610195565b005b600080fd5b3480156100cc57600080fd5b506001546040519081526020015b60405180910390f35b6100b96100f13660046106f1565b610195565b34801561010257600080fd5b506100b9610268565b34801561011757600080fd5b506100b96102e7565b34801561012c57600080fd5b5061014061013b366004610755565b6102fb565b6040516100da91906107bb565b34801561015957600080fd5b506000546040516001600160a01b0390911681526020016100da565b34801561018157600080fd5b506100b9610190366004610819565b610490565b346101b35760405163ea317e9960e01b815260040160405180910390fd5b600180549060006101c383610849565b909155505060018054600090815260026020818152604090922080546001600160a01b031916331781554293810193909355845161020792918401918601906105b5565b50815161021d90600383019060208501906105b5565b50336001600160a01b03167f0b7f87ba586eecf73cd9a259d82989ed3432948ae690ef22ca831e8805769e3542858560405161025b93929190610872565b60405180910390a2505050565b61027061050b565b600080546040516001600160a01b039091169047908381818185875af1925050503d80600081146102bd576040519150601f19603f3d011682016040523d82523d6000602084013e6102c2565b606091505b50509050806102e45760405163203183b160e21b815260040160405180910390fd5b50565b6102ef61050b565b6102f96000610565565b565b61032f604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b600082815260026020818152604092839020835160808101855281546001600160a01b0316815260018201549281019290925291820180549193840191610375906108a7565b80601f01602080910402602001604051908101604052809291908181526020018280546103a1906108a7565b80156103ee5780601f106103c3576101008083540402835291602001916103ee565b820191906000526020600020905b8154815290600101906020018083116103d157829003601f168201915b50505050508152602001600382018054610407906108a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610433906108a7565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b5050505050815250509050919050565b61049861050b565b6001600160a01b0381166105025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102e481610565565b6000546001600160a01b031633146102f95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546105c1906108a7565b90600052602060002090601f0160209004810192826105e35760008555610629565b82601f106105fc57805160ff1916838001178555610629565b82800160010185558215610629579182015b8281111561062957825182559160200191906001019061060e565b50610635929150610639565b5090565b5b80821115610635576000815560010161063a565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261067557600080fd5b813567ffffffffffffffff808211156106905761069061064e565b604051601f8301601f19908116603f011681019082821181831017156106b8576106b861064e565b816040528381528660208588010111156106d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561070457600080fd5b823567ffffffffffffffff8082111561071c57600080fd5b61072886838701610664565b9350602085013591508082111561073e57600080fd5b5061074b85828601610664565b9150509250929050565b60006020828403121561076757600080fd5b5035919050565b6000815180845260005b8181101561079457602081850181015186830182015201610778565b818111156107a6576000602083870101525b50601f01601f19169290920160200192915050565b6020815260018060a01b0382511660208201526020820151604082015260006040830151608060608401526107f360a084018261076e565b90506060840151601f19848303016080850152610810828261076e565b95945050505050565b60006020828403121561082b57600080fd5b81356001600160a01b038116811461084257600080fd5b9392505050565b600060001982141561086b57634e487b7160e01b600052601160045260246000fd5b5060010190565b83815260606020820152600061088b606083018561076e565b828103604084015261089d818561076e565b9695505050505050565b600181811c908216806108bb57607f821691505b602082108114156108dc57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a0da9d86c26592d62114573dd115c6e05954fcae950a784437d85357a9fc479464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BuyMeACoffe.sol:BuyMeACoffe",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 145,
        "contract": "contracts/BuyMeACoffe.sol:BuyMeACoffe",
        "label": "s_coffeId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/BuyMeACoffe.sol:BuyMeACoffe",
        "label": "s_coffeById",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Coffe)154_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Coffe)154_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuyMeACoffe.Coffe)",
        "numberOfBytes": "32",
        "value": "t_struct(Coffe)154_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Coffe)154_storage": {
        "encoding": "inplace",
        "label": "struct BuyMeACoffe.Coffe",
        "members": [
          {
            "astId": 147,
            "contract": "contracts/BuyMeACoffe.sol:BuyMeACoffe",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 149,
            "contract": "contracts/BuyMeACoffe.sol:BuyMeACoffe",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 151,
            "contract": "contracts/BuyMeACoffe.sol:BuyMeACoffe",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 153,
            "contract": "contracts/BuyMeACoffe.sol:BuyMeACoffe",
            "label": "message",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}